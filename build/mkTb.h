/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Fri Feb 24 16:35:41 EST 2023
 * 
 */

/* Generation options: */
#ifndef __mkTb_h__
#define __mkTb_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMatrixMultiplyFolded.h"


/* Class declaration for the mkTb module */
class MOD_mkTb : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_ctr;
  MOD_Reg<tUInt32> INST_ctr_fsm;
  MOD_Reg<tUInt8> INST_going;
  MOD_mkMatrixMultiplyFolded INST_mma;
  MOD_Wire<tUInt8> INST_test_fsm_abort;
  MOD_Reg<tUInt8> INST_test_fsm_start_reg;
  MOD_Reg<tUInt8> INST_test_fsm_start_reg_1;
  MOD_Wire<tUInt8> INST_test_fsm_start_reg_2;
  MOD_Wire<tUInt8> INST_test_fsm_start_wire;
  MOD_Reg<tUInt8> INST_test_fsm_state_can_overlap;
  MOD_Reg<tUInt8> INST_test_fsm_state_fired;
  MOD_Wire<tUInt8> INST_test_fsm_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_test_fsm_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_test_fsm_state_overlap_pw;
  MOD_Wire<tUInt8> INST_test_fsm_state_set_pw;
  MOD_Reg<tUInt8> INST_test_number;
  MOD_RegFile<tUInt8,tUWide> INST_tests;
  MOD_Reg<tUInt8> INST_verbose;
 
 /* Constructor */
 public:
  MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l56c13;
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l44c16;
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l39c13;
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l32c16;
  tUInt8 DEF_WILL_FIRE_RL_test_fsm_action_l27c13;
  tUInt32 DEF_x__h75823;
 
 /* Local definitions */
 private:
  tUWide DEF_mma_resp_row_c___d664;
  tUWide DEF_tests_sub_test_number_2_PLUS_2_66___d667;
  tUWide DEF_tests_sub_test_number_2_PLUS_1_46___d347;
  tUWide DEF_tests_sub_test_number_2___d57;
  tUInt8 DEF_x__h68301;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_7_BITS_511_TO__ETC___d643;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_7_BITS_511_TO__ETC___d642;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_PLUS_1_46_47_B_ETC___d652;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_PLUS_1_46_47_B_ETC___d651;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_7_BITS_511_TO__ETC___d641;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_PLUS_1_46_47_B_ETC___d650;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_7_BITS_511_TO__ETC___d640;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_PLUS_1_46_47_B_ETC___d649;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_7_BITS_511_TO__ETC___d639;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_PLUS_1_46_47_B_ETC___d648;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_7_BITS_511_TO__ETC___d638;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_PLUS_1_46_47_B_ETC___d647;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_7_BITS_511_TO__ETC___d637;
  tUWide DEF_SEL_ARR_tests_sub_test_number_2_PLUS_1_46_47_B_ETC___d646;
  tUInt32 DEF_x__h22515;
 
 /* Rules */
 public:
  void RL_inc_ctr();
  void RL_test_fsm_start_reg__dreg_update();
  void RL_test_fsm_state_handle_abort();
  void RL_test_fsm_state_fired__dreg_update();
  void RL_test_fsm_state_every();
  void RL_test_fsm_restart();
  void RL_test_fsm_action_l27c13();
  void RL_test_fsm_action_l32c16();
  void RL_test_fsm_action_l39c13();
  void RL_test_fsm_action_l44c16();
  void RL_test_fsm_action_l56c13();
  void RL_test_fsm_fsm_start();
  void RL_start();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTb &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing);
};

#endif /* ifndef __mkTb_h__ */
